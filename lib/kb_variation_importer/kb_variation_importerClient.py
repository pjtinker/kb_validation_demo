# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_variation_importer(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def import_snp_data(self, import_snp_params, context=None):
        """
        :param import_snp_params: instance of type "import_snp_params"
           (Insert your typespec information here.) -> structure: parameter
           "workspace_name" of String, parameter "staging_file_subdir_path"
           of String, parameter "will_perform_gwas" of Long
        :returns: instance of type "snp_import_results" -> structure:
           parameter "report_name" of String, parameter "report_ref" of
           String, parameter "vcf_version" of String
        """
        return self._client.call_method(
            'kb_variation_importer.import_snp_data',
            [import_snp_params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_variation_importer.status',
                                        [], self._service_ver, context)
